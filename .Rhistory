source('~/.active-rstudio-document', echo=TRUE)
ls()
len.samplesize=summaryBy(len~region+tmp,data=len,FUN=length)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(l.trips)
?merge
source('~/.active-rstudio-document', echo=TRUE)
test=merge(len.samplesize,l.trips,by.x=c('year','gear','region','tmp'),all=TRUE)
## use character columns of names to get sensible sort order
authors <- data.frame(
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
(m1 <- merge(authors, books, by.x = "surname", by.y = "name"))
(m2 <- merge(books, authors, by.x = "name", by.y = "surname"))
stopifnot(as.character(m1[, 1]) == as.character(m2[, 1]),
all.equal(m1[, -1], m2[, -1][ names(m1)[-1] ]),
dim(merge(m1, m2, by = integer(0))) == c(36, 10))
test=merge(len.samplesize,l.trips,by=c('year'),all=TRUE)
head(len)
head(l.trips)
test=merge(len.samplesize,l.trips,by=c('year','gear'),all=TRUE)
test=merge(len.samplesize,l.trips,all=TRUE)
head(test)
age.samplesize=summaryBy(age~year+region+tmp,data=age,FUN=length)
age.samplesize=merge(age.samplesize,a.trips,all=TRUE)
age.samplesize
len.samplesize=summaryBy(len~year+region+tmp,data=len,FUN=length)
age.samplesize=summaryBy(age~year+region+tmp,data=age,FUN=length)
samplesize=merge(len.samplesize,l.trips,age.samplesize,a.trips,all=TRUE)
samplesize=merge(len.samplesize,l.trips,all=TRUE)
len.samplesize=summaryBy(len~year+region+tmp,data=len,FUN=length)
age.samplesize=summaryBy(age~year+region+tmp,data=age,FUN=length)
samplesize=merge(len.samplesize,l.trips,all=TRUE)
samplesize=merge(samplesize,age.samplesize,all=TRUE)
samplesize=merge(samplesize,a.trips,all=TRUE)
head(samplesize)
samplesize
head(l.trips)
l.trips=read.csv(paste(in.path,'in.l.trips.csv',sep='/'),header=TRUE)
head(l.trips)
source('~/.active-rstudio-document', echo=TRUE)
samplesize
?xtable
samplesize
len.samplesize=summaryBy(len~year+region+tmp,data=len,FUN=length)
age.samplesize=summaryBy(age~year+region+tmp,data=age,FUN=length)
samplesize=merge(len.samplesize,l.trips,all=TRUE)
samplesize=merge(samplesize,age.samplesize,all=TRUE)
samplesize=merge(samplesize,a.trips,all=TRUE)
head(samplesize)
samplesize=samplesize[,c(year,gear,region,tmp.len.length,l.trips,age.length,a.trips)]
samplesize=samplesize[,c(samplesize$year,samplesize$gear,samplesize$region,samplesize$tmp,samplesize$len.length,samplesize$l.trips,samplesize$age.length,samplesize$a.trips)]
samplesize=samplesize[,c(1,4,2,3,5,6,7,8)]
samplesize
len.samplesize=summaryBy(len~year+region+tmp,data=len,FUN=length)
age.samplesize=summaryBy(age~year+region+tmp,data=age,FUN=length)
samplesize=merge(len.samplesize,l.trips,all=TRUE)
samplesize=merge(samplesize,age.samplesize,all=TRUE)
samplesize=merge(samplesize,a.trips,all=TRUE)
samplesize=samplesize[,c(1,4,2,3,5,6,7,8)]
colnames(samplesize)=c('Year','Region','Season','Len.Fish','Len.Trips','Age.Fish','Age.Trips')
for(i in 1:length(gear)){
table1=xtable(samplesize[samplesize$gear=i,],digits=0,include.rownames=FALSE)
print(table1,type="html")
}
for(i in 1:length(gear)){
table1=xtable(samplesize[samplesize$gear=i,],digits=0,include.rownames=FALSE)
print(table1,type="html")
}
able1=xtable(samplesize[samplesize$gear=i,],digits=0,include.rownames=FALSE)
for(i in 1:length(gear)){
table1=xtable(samplesize[samplesize$gear==i,],digits=0,include.rownames=FALSE)
print(table1,type="html")
}
source('~/.active-rstudio-document', echo=TRUE)
len.samplesize=summaryBy(len~year+region+tmp,data=len,FUN=length)
age.samplesize=summaryBy(age~year+region+tmp,data=age,FUN=length)
samplesize=merge(len.samplesize,l.trips,all=TRUE)
samplesize=merge(samplesize,age.samplesize,all=TRUE)
samplesize=merge(samplesize,a.trips,all=TRUE)
samplesize=samplesize[,c(1,4,2,3,5,6,7,8)]
colnames(samplesize)=c('Year','Region','Season','Len.Fish','Len.Trips','Age.Fish','Age.Trips')
for(i in 1:length(gear)){
table1=xtable(samplesize[samplesize$gear==i,],digits=0,include.rownames=FALSE)
print(table1,type="html")
}
table1=xtable(samplesize[samplesize$gear==1,],digits=0,include.rownames=FALSE)
head(table1)
x=samplesize[samplesize$gear==1,]
head(x)
for(i in 1:length(gear)){
table1=xtable(samplesize[samplesize$Gear==i,],digits=0,include.rownames=FALSE)
print(table1,type="html")
}
table1=xtable(samplesize[samplesize$Gear==1,],digits=0,include.rownames=FALSE)
print(table1,type="html")
x=\(samplesize[samplesize$Gear==1,]
x=samplesize[samplesize$Gear==1,]
head(x)
head(samplesize)
len.samplesize=summaryBy(len~year+region+tmp,data=len,FUN=length)
age.samplesize=summaryBy(age~year+region+tmp,data=age,FUN=length)
samplesize=merge(len.samplesize,l.trips,all=TRUE)
samplesize=merge(samplesize,age.samplesize,all=TRUE)
samplesize=merge(samplesize,a.trips,all=TRUE)
samplesize=samplesize[,c(1,4,2,3,5,6,7,8)]
head(samplesize)
colnames(samplesize)=c('Year','Gear','Region','Season','Len.Fish','Len.Trips','Age.Fish','Age.Trips')
for(i in 1:length(gear)){
table1=xtable(samplesize[samplesize$Gear==1,],digits=0,include.rownames=FALSE)
print(table1,type="html")
}
bin.lens=function(x,from.bin=min(x),to.bin=max(x),by.bin=3,pool.min=TRUE,pool.max
=TRUE){
bin.seq=seq(from.bin, to.bon, by=by.bin)
if(pool.min==TRUE){x$pool.cm[x<from.bin]=from.bin}
if(pool.min==TRUE){x$pool.cm[x>to.bin]=to.bin}
}
test=c(5,6,7,9,9,9,9,14,15,21,21,21,21,25)
bin.lens(test)
bin.lens=function(x,from.bin=min(x),to.bin=max(x),by.bin=3,pool.min=TRUE,pool.max
=TRUE){
bin.seq=seq(from.bin, to.bin, by=by.bin)
if(pool.min==TRUE){x$pool.cm[x<from.bin]=from.bin}
if(pool.min==TRUE){x$pool.cm[x>to.bin]=to.bin}
}
test=c(5,6,7,9,9,9,9,14,15,21,21,21,21,25)
bin.lens(test)
bin.lens=function(x,from.bin=min(x),to.bin=max(x),by.bin=3,pool.min=TRUE,pool.max
=TRUE){
bin.seq=seq(from.bin, to.bin, by=by.bin)
if(pool.min==TRUE){pool.cm[x<from.bin]=from.bin}
if(pool.min==TRUE){pool.cm[x>to.bin]=to.bin}
}
bin.lens(test)
bin.lens=function(x,from.bin=min(x),to.bin=max(x),by.bin=3,pool.min=TRUE,pool.max
=TRUE){
bin.seq=seq(from.bin, to.bin, by=by.bin)
pool.cm=rep('NA',length(x))
if(pool.min==TRUE){pool.cm[x<from.bin]=from.bin}
if(pool.min==TRUE){pool.cm[x>to.bin]=to.bin}
}
bin.lens(test)
x=bin.lens(test)
x
x=teast
x=test
x
from.bin=min(x)
from.bin
to.bin=max(x)
by.bin=3
bin.seq=seq(from.bin, to.bin, by=by.bin)
bin.seq
pool.cm=rep('NA',length(x))
pool.cm
pool.min=TRUE
pool.max
=TRUE
bin.lens=function(x,from.bin=min(x),to.bin=max(x),by.bin=3,pool.min=TRUE,pool.max
=TRUE){
bin.seq=seq(from.bin, to.bin, by=by.bin)
pool.cm=rep('NA',length(x))
if(pool.min=TRUE){pool.cm[x<from.bin]=from.bin}
if(pool.min=TRUE){pool.cm[x>to.bin]=to.bin}
}
bin.lens=function(x,from.bin=min(x),to.bin=max(x),by.bin=3,pool.min=TRUE,pool.max
=TRUE){
bin.seq=seq(from.bin, to.bin, by=by.bin)
pool.cm=rep('NA',length(x))
if(pool.min==TRUE){pool.cm[x<from.bin]=from.bin}
if(pool.min==TRUE){pool.cm[x>to.bin]=to.bin}
}
z=bin.lens(x)
z
pool.cm
bin.lens=function(x,from.bin=min(x),to.bin=max(x),by.bin=3,pool.min=TRUE,pool.max
=TRUE){
bin.seq=seq(from.bin, to.bin, by=by.bin)
pool.cm=rep('NA',length(x))
if(pool.min==TRUE){pool.cm[x<from.bin]=from.bin}
if(pool.max==TRUE){pool.cm[x>to.bin]=to.bin}
print(pool.cm)
}
bin.lens(test)
bin.lens=function(x,from.bin=min(x),to.bin=max(x),by.bin=3,pool.min=TRUE,pool.max
=TRUE){
bin.seq=seq(from.bin, to.bin, by=by.bin)
pool.cm=rep(0,length(x))
if(pool.min==TRUE){pool.cm[x<from.bin]=from.bin}
if(pool.max==TRUE){pool.cm[x>to.bin]=to.bin}
print(pool.cm)
}
test=c(5,6,7,9,9,9,9,14,15,21,21,21,21,25)
bin.lens(test)
bin.seq=seq(from.bin, to.bin, by=by.bin)
bin.seq
bin.lens=function(x,from.bin=min(x),to.bin=max(x),by.bin=3,pool.min=TRUE,pool.max
=TRUE){
bin.seq=seq(from.bin, to.bin, by=by.bin)
pool.cm=rep(0,length(x))
if(pool.min==TRUE){x[x<from.bin]=from.bin}
if(pool.max==TRUE){x[x>to.bin]=to.bin}
print(pool.cm)
}
test=c(5,6,7,9,9,9,9,14,15,21,21,21,21,25)
bin.lens=function(x,from.bin=min(x),to.bin=max(x),by.bin=3,pool.min=TRUE,pool.max
=TRUE){
bin.seq=seq(from.bin, to.bin, by=by.bin)
pool.cm=rep(0,length(x))
if(pool.min==TRUE){x[x<from.bin]=from.bin}
if(pool.max==TRUE){x[x>to.bin]=to.bin}
print(x)
}
bin.lens(test)
x=test
x[x>20]=20
x
is.true(pool.max)
pool.min
pool.max
pool.max
=TRUE){
pool.max
=TRUE)
pool.max=TRUE
pool.max
bin.lens=function(x,from.bin=min(x),to.bin=max(x),by.bin=3,pool.min=TRUE,pool.max=TRUE){
bin.seq=seq(from.bin, to.bin, by=by.bin)
pool.cm=rep(0,length(x))
if(pool.min==TRUE){x[x<from.bin]=from.bin}
if(pool.max==TRUE){x[x>to.bin]=to.bin}
print(x)
}
test=c(5,6,7,9,9,9,9,14,15,21,21,21,21,25)
bin.lens(test)
z=bin.lens(test)
z
tmp.bin=seq(from.bin,1000,by=by.bin)
head(tmp.bin)
pool.min=TRUE
pool.max=TRUE
by.bin=3
tmp.bin=seq(from.bin,1000,by=by.bin)
head(tmp.bin)
if(to.bin%in%tmp.bin){to.bin=to.bin}
to.bin
else if(to.bin-1%in%tmp.bin){to.bin=to.bin-1}
if(to.bin-1%in%tmp.bin){to.bin=to.bin-1}
if(to.bin-2%in%tmp.bin){to.bin=to.bin-2}
if(to.bin-3%in%tmp.bin){to.bin=to.bin-3}
if(to.bin-4%in%tmp.bin){to.bin=to.bin-4}
if(to.bin-5%in%tmp.bin){to.bin=to.bin-5}
to.bin
to.bin=max(x)
to.bin
tmp.bin=seq(from.bin,1000,by=by.bin)
head(tm.bin)
head(tmp.bin)
tmp.bin[1:20]
x=test
from.bin=min(x)
to.bin=max(x)
to.bin
tmp.bin=seq(from.bin,1000,by=by.bin)
if(to.bin%in%tmp.bin){to.bin=to.bin}
if(to.bin-1%in%tmp.bin){to.bin=to.bin-1}
if(to.bin-2%in%tmp.bin){to.bin=to.bin-2}
if(to.bin-3%in%tmp.bin){to.bin=to.bin-3}
if(to.bin-4%in%tmp.bin){to.bin=to.bin-4}
if(to.bin-5%in%tmp.bin){to.bin=to.bin-5}
to.bin
to.bin=max(x)
tmp.bin=seq(from.bin,1000,by=by.bin)
if(to.bin%in%tmp.bin){to.bin=to.bin}
to.bin
if(to.bin-1%in%tmp.bin){to.bin=to.bin-1}
to.bin
tmp.bin
seq(5,25,by=3)
x
tip.hl$tl3cm[tip.hl$tlcm%in%lenbins]=tip.hl$tlcm[tip.hl$tlcm%in%lenbins]
temp.tl=tip.hl$tlcm+1
tip.hl$tl3cm[temp.tl%in%lenbins]=temp.tl[temp.tl%in%lenbins]
temp.tl=tip.hl$tlcm-1
tip.hl$tl3cm[temp.tl%in%lenbins]=temp.tl[temp.tl%in%lenbins]
x[x<from.bin]=from.bin
x
bin.lens=function(x,from.bin=min(x),to.bin=max(x),by.bin=3,pool.min=TRUE,pool.max=TRUE){
bin.seq=seq(from.bin, to.bin, by=by.bin)
pool.cm=rep(0,length(x))
if(pool.min==TRUE){x[x<from.bin]=from.bin}
if(pool.max==TRUE){x[x>max(bin.seq)]=max(bin.seq)}
print(x)
}
test=c(5,6,7,9,9,9,9,14,15,21,21,21,21,25)
bin.lens(test)
bin.lens(test,from.bin=7)
z=bin.lens(test)
z
